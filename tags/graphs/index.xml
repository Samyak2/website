<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>graphs on Samyak Sarnayak</title><link>https://samyak.me/tags/graphs/</link><description>Recent content in graphs on Samyak Sarnayak</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://samyak.me/tags/graphs/index.xml" rel="self" type="application/rss+xml"/><item><title>Turns out that BFS is not the same as topological sort</title><link>https://samyak.me/post/bfs-topo/</link><pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate><guid>https://samyak.me/post/bfs-topo/</guid><description>The title may seem very obvious to people who know graph algorithms. Unfortunately, I&amp;rsquo;m not one of them.
The problem # This is about implementing a dependency graph. Think of a project&amp;rsquo;s npm/pip/maven/cargo dependencies. Or a data pipeline with SQL tables depending on each other.
Here is the problem that needed to be solved. Given a project or a table (a &amp;ldquo;node&amp;rdquo;) in the tree, how do I get all the other nodes that depend on it (the dependents)?</description></item></channel></rss>