<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Samyak Sarnayak</title><link>https://samyak.me/</link><description>Recent posts from on Samyak Sarnayak</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 05 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://samyak.me/index.xml" rel="self" type="application/rss+xml"/><item><title>How is sound represented in code?</title><link>https://samyak.me/post/audio/</link><pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate><guid>https://samyak.me/post/audio/</guid><description>&lt;p>First, a disclaimer: I&amp;rsquo;m not a musician, nor do I have any formal training in music. However, I have a genuine interest in it and have been learning guitar for a few months. I might get some music-related concepts wrong, so please feel free to correct me.&lt;/p>
&lt;!-- As I was writing this article, the concepts seemed too obvious to me. But that was definitely not the case before I learnt of them. I'm sure there's a name for this phenomenon. -->
&lt;h1 id="what-is-sound-anyway">
What is sound anyway?
&lt;a class="heading-anchor" href="#what-is-sound-anyway">
#
&lt;/a>
&lt;/h1>
&lt;p>You might have learnt about sound as &lt;em>waves&lt;/em> traveling through air. Air repeatedly gets compressed and expanded. Our ears perceive that as sound. &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;img alt="a GIF of waves traveling through the air towards the right. The waves are created by a piston compressing the air from the left." src="https://samyak.me/images/sound_wave_opt.gif" style="max-width: 100%;" />
&lt;p>Another way to look at sound is &lt;em>vibration&lt;/em>. When moving air hits the eardrum, it makes the drum vibrate and (oversimplifying it a lot) we perceive that as sound. It moves back and forth slightly from its resting position. &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;img alt="a GIF of a membrane vibrating" src="https://samyak.me/images/drum_vibration_opt.gif" style="max-width: 100%;" />
&lt;h2 id="frequencies">
Frequencies
&lt;a class="heading-anchor" href="#frequencies">
#
&lt;/a>
&lt;/h2>
&lt;p>Both the waves and the vibrations happen very quickly. Humans can generally &lt;span class="sidenote">
&lt;label class="sidenote-label" for="sidenote-0">hear frequencies in the range of 20Hz to 20,000Hz.&lt;/label>
&lt;input class="sidenote-checkbox" type="checkbox" checked id="sidenote-0">&lt;/input>
&lt;span class="sidenote-content sidenote-right">
Those numbers are an ideal range. As we age, that range reduces a lot. If you&amp;rsquo;re above 50, that range goes up to only 8000 or 12000Hz. &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>
&lt;/span>
&lt;/span>
1 Hertz (written as 1Hz) is one back and forth movement in one second. Imagine something vibrating 20,000 times a second!&lt;/p>
&lt;p>The frequency of (western) music generally ranges from 30Hz to around 4200Hz.&lt;/p>
&lt;p>Low-frequency sounds are deep and thick, which is referred to as low pitch. High-frequency sounds are thin and sharp, which is known as high pitch.&lt;/p>
&lt;span class="sidenote">
&lt;label class="sidenote-label" for="sidenote-1">Here are two example sounds from a piano.&lt;/label>
&lt;input class="sidenote-checkbox" type="checkbox" checked id="sidenote-1">&lt;/input>
&lt;span class="sidenote-content sidenote-right">
However note (hehe) that a note on an instrument doesn't just consist of a single frequency.
&lt;/span>
&lt;/span>
&lt;!-- A2: https://www.apronus.com/static/pno0x3-pianosounds/pno045.mp3 -->
&lt;!-- A5: https://www.apronus.com/static/pno0x3-pianosounds/pno081.mp3 -->
&lt;figure style="margin: 10px">
&lt;figcaption>Low pitch (note A2):&lt;/figcaption>&lt;audio controls src="https://github.com/fuhton/piano-mp3/raw/refs/heads/master/piano-mp3/A2.mp3">&lt;/audio>
&lt;/figure>
&lt;figure style="margin: 10px">
&lt;figcaption>High pitch (note A6):&lt;/figcaption>&lt;audio controls src="https://github.com/fuhton/piano-mp3/raw/refs/heads/master/piano-mp3/A6.mp3">&lt;/audio>
&lt;/figure>
&lt;h1 id="how-do-we-represent-sound-as-data">
How do we represent sound as data?
&lt;a class="heading-anchor" href="#how-do-we-represent-sound-as-data">
#
&lt;/a>
&lt;/h1>
&lt;p>Now that we know that sound is just waves, let&amp;rsquo;s look at the simplest wave. The &lt;em>sine&lt;/em> wave. It is called so because it&amp;rsquo;s the wave created by $$y = sin(x)$$&lt;/p>
&lt;p>A wave has two important properties. The &lt;em>amplitude&lt;/em> (A) is the maximum displacement from the reference value which, in this case, is 0. The second is &lt;em>frequency&lt;/em> (f), which is how often the wave repeats and is usually measured in Hertz (Hz). For example, a sine wave of f=2Hz repeats the whole wave (from 0 to 0) twice in one second. In other words, the distance between two peaks of the wave is 1/f = 0.5 seconds.&lt;/p>
&lt;p>For a sine wave with custom amplitude and frequency, the equation would be:&lt;/p>
&lt;span class="sidenote">
&lt;label class="sidenote-label" for="sidenote-2">$$y = A \cdot sin(f \cdot x)$$&lt;/label>
&lt;input class="sidenote-checkbox" type="checkbox" checked id="sidenote-2">&lt;/input>
&lt;span class="sidenote-content sidenote-right">
Actually, the equation used for the exact chart below is $$y = A \cdot sin(2\pi \cdot f \cdot x)$$ A simple sin(x) wave repeats every 2π distance on the x-axis. The multiplication by 2π ensures it repeats every 1.0 distance on the x-axis (or every 1/f distance).
&lt;/span>
&lt;/span>
&lt;p>Here&amp;rsquo;s an interactive chart. Tweak the amplitude and frequency values below and notice the changes in the waveform.&lt;/p>
&lt;div id="graph-container">&lt;/div>
&lt;div class="slider-container">
&lt;label for="amplitude">Amplitude: &lt;span id="amplitudeValue">1&lt;/span>&lt;/label>
&lt;input type="range" id="amplitude" min="0.5" max="5" step="0.1" value="3.0" />
&lt;p>&lt;label for="frequency">Frequency: &lt;span id="frequencyValue">1&lt;/span>&lt;/label>
&lt;input type="range" id="frequency" min="0.1" max="5" step="0.1" value="0.5" />&lt;/p>
&lt;/div>
&lt;script type="module" async src="https://samyak.me/scripts/graphs1.js">&lt;/script>
&lt;style>
.slider-container {
display: flex;
flex-wrap: wrap;
align-items: center;
margin-top: 20px;
gap: 10px;
}
label {
white-space: nowrap;
}
#samplePointsValue {
min-width: 2em;
text-align: right;
}
#samplePoints {
flex-grow: 1;
}
&lt;/style>
&lt;h3 id="into-a-digital-world">
Into a digital world
&lt;a class="heading-anchor" href="#into-a-digital-world">
#
&lt;/a>
&lt;/h3>
&lt;p>A wave is, by definition, &lt;em>analog&lt;/em>. However, in code, we only deal with the digital. The 1s and 0s. One way to go from analog to digital is by &lt;em>sampling&lt;/em>. That is, checking the amplitude at regular intervals and recording it. The regular interval is called the &lt;em>sampling rate&lt;/em>.
Sampling never perfectly represents the source wave.&lt;/p>
&lt;p>Here&amp;rsquo;s a sine wave and a sampling of it represented by dots. We can try reconstructing it by connecting the dots. As can be expected, the reconstructed wave becomes more and more accurate as we increase the sampling rate. With a high enough sample rate, the sample is close enough to the original.&lt;/p>
&lt;div id="graph-container-2">&lt;/div>
&lt;div class="slider-container">
&lt;label for="samplePoints">Number of sample points:&lt;/label>
&lt;span id="samplePointsValue">24&lt;/span>
&lt;input type="range" id="samplePoints" min="3" max="99" value="24" step="3" />
&lt;/div>
&lt;script type="module" async src="https://samyak.me/scripts/graphs2.js">&lt;/script>
&lt;h3 id="are-we-data-yet">
Are we data yet?
&lt;a class="heading-anchor" href="#are-we-data-yet">
#
&lt;/a>
&lt;/h3>
&lt;p>Okay, so we now have the audio as a bunch of points on a graph. To represent a point as data, we simply take its x and y-coordinates. In this case, the x-axis is time and the y is amplitude.
So audio data is just a series of: $$[(t_1, a_1), (t_2, a_2), &amp;hellip;, (t_n, a_n)]$$&lt;/p>
&lt;p>Here is some of the data from the above chart, showing the sampled points.&lt;/p>
&lt;div id="points1" class="pointList">&lt;/div>
&lt;style>
.pointList {
display: flex;
flex-direction: row;
flex-wrap: nowrap;
white-space: nowrap;
overflow-x: auto;
font-family: monospace;
}
.pointReprFirst, .pointReprLast {
padding-right: 12px;
}
&lt;/style>
&lt;h3 id="an-optimization">
An optimization
&lt;a class="heading-anchor" href="#an-optimization">
#
&lt;/a>
&lt;/h3>
&lt;p>You can notice a pattern in the data above. The points are always at a regular interval. So the x-values are always a multiple of some number. There are &amp;ldquo;sampling rate&amp;rdquo; number of points in one second of data. So the distance between a data point and the next is &lt;code>1/(sampling rate)&lt;/code> seconds.&lt;/p>
&lt;p>This is true even in the case of real-world audio data. We can assume that the data points (the amplitudes) are always sampled at the correct interval. This means we can drop the x-values entirely. Those values can be recreated entirely using the sampling rate. So audio data now is just an array of numbers!&lt;/p>
&lt;div id="points2" class="pointList">&lt;/div>
&lt;p>Now we know that audio data can be specified using two things:&lt;/p>
&lt;ol>
&lt;li>The sampling rate. The unit for this is usually Hertz (Hz) or Kilohertz (kHz).&lt;/li>
&lt;li>The amplitude of the audio at regular intervals. It&amp;rsquo;s just a list/an array of numbers.&lt;/li>
&lt;/ol>
&lt;h2 id="images---a-parallel">
Images - a parallel
&lt;a class="heading-anchor" href="#images---a-parallel">
#
&lt;/a>
&lt;/h2>
&lt;p>Let us look at something that is a little bit easier to see as data. An image. Here&amp;rsquo;s an example of a simple black &amp;amp; white (also called grayscale) image &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>:&lt;/p>
&lt;p>&lt;img src="https://samyak.me/images/plane.png" alt="An image of a plane. Top view. An old airplane, might be a toy">&lt;/p>
&lt;p>The resolution of this image is 256 pixels by 256 pixels. Totalling 65,536 pixels.
Each pixel is represented by a number. 0 (the minimum value) is black and &lt;span class="sidenote">
&lt;label class="sidenote-label" for="sidenote-7">255 (the maximum value) is white.&lt;/label>
&lt;input class="sidenote-checkbox" type="checkbox" checked id="sidenote-7">&lt;/input>
&lt;span class="sidenote-content sidenote-right">
This depends on the &lt;a href="https://en.wikipedia.org/wiki/Color_depth">bit depth&lt;/a> of the image. The example image uses 8-bit color, hence the range of 0-255.
&lt;/span>
&lt;/span>&lt;/p>
&lt;p>So to represent an image, all we need is the resolution (height, width) and a bunch of numbers. In this case, an array of 65,536 numbers.&lt;/p>
&lt;p>An image can be seen as a 2-d matrix - numbers arranged in rows and columns:&lt;/p>
&lt;p>$$
\begin{Bmatrix}
104 &amp;amp; 102 &amp;amp; &amp;hellip; &amp;amp; 112 &amp;amp; 113 \\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots &amp;amp; \vdots\\
203 &amp;amp; 188 &amp;amp; &amp;hellip; &amp;amp; 179 &amp;amp; 172
\end{Bmatrix}
$$&lt;/p>
&lt;p>Color images are similar. Instead of one matrix, you have three separate ones for &lt;span class="sidenote">
&lt;label class="sidenote-label" for="sidenote-8">red, green and blue.&lt;/label>
&lt;input class="sidenote-checkbox" type="checkbox" checked id="sidenote-8">&lt;/input>
&lt;span class="sidenote-content sidenote-right">
RGB is only one of many &lt;a href="https://en.wikipedia.org/wiki/Color_model">color models&lt;/a>.
&lt;/span>
&lt;/span>
Another way is to represent each value in the matrix as a tuple of three values (r, g, b).&lt;/p>
&lt;h2 id="back-to-audio">
Back to audio
&lt;a class="heading-anchor" href="#back-to-audio">
#
&lt;/a>
&lt;/h2>
&lt;p>That digression into image as data probably raises more questions than it answers, such as: What&amp;rsquo;s the range of numbers in audio data? What&amp;rsquo;s the &lt;em>all black&lt;/em> and &lt;em>all white&lt;/em> of audio?&lt;/p>
&lt;p>The sine wave we saw earlier will give us some hint into the range of values. Unlike images, audio data can be negative too. The zero value is the resting position of the drum or the string. The vibration happens in both directions, hence the positive and negative values.&lt;/p>
&lt;p>The actual range depends on the sample&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/Audio_bit_depth">bit depth&lt;/a>. 16-bit audio, for example, has values in the range -32,768 to +32,767. When processing audio, the data is usually &lt;span class="sidenote">
&lt;label class="sidenote-label" for="sidenote-9">converted to floating point and sometimes normalized to the range of -1.0 to 1.0.&lt;/label>
&lt;input class="sidenote-checkbox" type="checkbox" checked id="sidenote-9">&lt;/input>
&lt;span class="sidenote-content sidenote-right">
Why? I&amp;rsquo;m not sure. It may be related to the fact that audio processing usually involves a lot of addition and multiplication. With integers, you would need to handle overflows and underflows.
&lt;/span>
&lt;/span>&lt;/p>
&lt;h3 id="black-and-white">
Black and white
&lt;a class="heading-anchor" href="#black-and-white">
#
&lt;/a>
&lt;/h3>
&lt;p>Here&amp;rsquo;s a sound sample with all zeros:&lt;/p>
&lt;figure style="margin: 10px">
&lt;figcaption>Black:&lt;/figcaption>&lt;audio controls src="https://samyak.me/audio/black.wav">&lt;/audio>
&lt;/figure>
&lt;p>You could try increasing the volume of your speakers, but you will hear nothing. As expected, it&amp;rsquo;s silent. This is the all black of audio.&lt;/p>
&lt;p>Now let&amp;rsquo;s see a sample with all maximum values (+1.0 or +32,767). Maybe lower your volume before playing.&lt;/p>
&lt;figure style="margin: 10px">
&lt;figcaption>White:&lt;/figcaption>&lt;audio controls src="https://samyak.me/audio/white.wav">&lt;/audio>
&lt;/figure>
&lt;p>And&amp;hellip; nothing? Try increasing the volume. You may hear two glitches or beeps—one at the beginning and another at the end. Imagine you press a drum&amp;rsquo;s membrane and hold it there. Or pull a guitar&amp;rsquo;s string and hold it. It won&amp;rsquo;t make any sound, except at two instants—once when you press and another when you release.&lt;/p>
&lt;p>This is a big difference between image and audio data. Sound is created by &lt;em>movement&lt;/em>. If there&amp;rsquo;s nothing changing across time, there&amp;rsquo;s no sound. Audio is &lt;em>temporal&lt;/em>. When the amplitude changes across time, like the sine wave we saw before, we get sound. A straight line is silence, no matter what amplitude it has.&lt;/p>
&lt;p>In a way, &lt;em>a piece of music is a painting in time&lt;/em>.&lt;/p>
&lt;h2 id="channels">
Channels
&lt;a class="heading-anchor" href="#channels">
#
&lt;/a>
&lt;/h2>
&lt;p>Similar to the R, G, B-values of color images, sound too can have multiple &lt;em>channels&lt;/em>. For example, most music is 2-channel. This is meant to be listened to with a pair of headphones. One channel for the left speaker and the other for the right. This is called &lt;span class="sidenote">
&lt;label class="sidenote-label" for="sidenote-10">&lt;em>stereo audio&lt;/em>&lt;/label>
&lt;input class="sidenote-checkbox" type="checkbox" checked id="sidenote-10">&lt;/input>
&lt;span class="sidenote-content sidenote-right">
You might have also heard of &lt;a href="https://en.wikipedia.org/wiki/5.1_surround_sound">5.1 channel audio&lt;/a> usually in the context of movies and home theatres.
&lt;/span>
&lt;/span>&lt;/p>
&lt;p>The way multi-channel audio is represented as data is similar to images. One method is to have multiple separate arrays of data—one array for each channel:&lt;/p>
&lt;p>$$
Ch_1 = [Ch_1t_1,\thickspace Ch_1t_2,\thickspace Ch_1t_3,\thickspace &amp;hellip;]\\
Ch_2 = [Ch_2t_1,\thickspace Ch_2t_2,\thickspace Ch_2t_3,\thickspace &amp;hellip;]\\
\vdots\\
Ch_n = [Ch_nt_1,\thickspace Ch_nt_2,\thickspace Ch_nt_3,\thickspace &amp;hellip;]\\
$$&lt;/p>
&lt;p>Alternatively, we can have a single array where each time step is represented by N numbers—one for each channel—arranged sequentially: N numbers for time1, then N numbers for time2, and so on:
$$
[Ch_1t_1,\thickspace Ch_2t_1,\thickspace &amp;hellip;,\thickspace Ch_nt_1,\thickspace Ch_1t_2,\thickspace Ch_2t_2,\thickspace &amp;hellip;,\thickspace Ch_nt_2, &amp;hellip;]
$$&lt;/p>
&lt;h1 id="conclusion">
Conclusion
&lt;a class="heading-anchor" href="#conclusion">
#
&lt;/a>
&lt;/h1>
&lt;p>Putting all of that together, sound is represented using these three properties:&lt;/p>
&lt;ol>
&lt;li>The sampling rate. Example: 44.1kHz.&lt;/li>
&lt;li>The number of channels. Example: 2.&lt;/li>
&lt;li>An array of numbers representing the amplitude at regular intervals (1/(sampling rate) seconds) and for each channel.&lt;/li>
&lt;/ol>
&lt;h1 id="further-reading">
Further reading
&lt;a class="heading-anchor" href="#further-reading">
#
&lt;/a>
&lt;/h1>
&lt;p>What can we do with this data? Since audio is just a signal, we can use digital signal processing (DSP) algorithms on it. One such process is the Fourier Transform, which can help find out the frequencies present in the audio data. There&amp;rsquo;s a class of algorithms for efficiently calculating the fourier transform of a signal in code—the &lt;a href="https://en.wikipedia.org/wiki/Fast_Fourier_transform">Fast Fourier Transform&lt;/a>.&lt;/p>
&lt;p>You can start playing around with audio data in code. There are libraries in most languages for reading sound from your device&amp;rsquo;s mic or by reading a wav, mp3, etc file. Here are some popular ones:&lt;/p>
&lt;ul>
&lt;li>Python:
&lt;ul>
&lt;li>Libraries for audio I/O: &lt;a href="https://github.com/spatialaudio/python-sounddevice">python-sounddevice&lt;/a> - has a simple interface for reading audio as a numpy array given the number of seconds, sample rate and number of channels.&lt;/li>
&lt;li>Libraries for audio processing: SciPy - &lt;a href="https://docs.scipy.org/doc/scipy/tutorial/fft.html">fourier transforms&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Rust: &lt;a href="https://rust.audio/">rust.audio&lt;/a> is a good collection of resources. Some mentions:
&lt;ul>
&lt;li>&lt;a href="https://github.com/rustaudio/cpal">cpal&lt;/a> - audio I/O library. This is not the simplest library to start with. It took me a while to figure out reading audio data into a Vec.&lt;/li>
&lt;li>&lt;a href="https://github.com/SamiPerttu/fundsp">fundsp&lt;/a> - audio synthesis library. You can create sounds, maybe even music, with just code. I have not used it extensively—only the basics to generate test cases for audio applications.&lt;/li>
&lt;li>&lt;a href="https://github.com/ejmahler/RustFFT">rustfft&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- https://en.wikibooks.org/wiki/A-level_Computing/AQA/Paper_2/Fundamentals_of_data_representation/Sounds -->
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Source of the image: &lt;a href="https://blog.soton.ac.uk/soundwaves/wave-basics/ways-of-showing-waves/">Ways of showing waves by The University of Southampton&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Source of the image: &lt;a href="https://www.acs.psu.edu/drussell/Demos/MembraneCircle/Circle.html">Vibrational Modes of a Circular Membrane by Dan Russell&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Source: &lt;a href="https://www.sciencedirect.com/science/article/pii/S2666606521000407">Patterns of hearing changes in women and men from denarians to nonagenarians&lt;/a> by Wasano et al.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>Source: &lt;a href="https://sipi.usc.edu/database/database.php?volume=misc&amp;amp;image=16#top">Database of test images&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>tremolisto: a collection of isolated guitar parts</title><link>https://samyak.me/post/tremolisto/</link><pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><guid>https://samyak.me/post/tremolisto/</guid><description>&lt;p>I have been collecting interesting parts of songs that feature a guitar. It&amp;rsquo;s been a few months now and I have 117 of them. This seems like a good time to introduce it.&lt;/p>
&lt;p>Check it out at: &lt;a href="https://tremolisto.samyak.me/">https://tremolisto.samyak.me/&lt;/a>&lt;/p>
&lt;p>It focuses on solos and riffs. And is biased towards electric guitar. The guitar sections are available to play directly on the website. They are trimmed from the original audio, so some non-guitar sounds may be included.&lt;/p>
&lt;p>This started as a simple list of songs I keep in my notes. It was meant to be a list of songs I could try playing once I started learning the guitar. But it grew quickly. I would need years or even decades of learning to be able to play some of those songs. Now it&amp;rsquo;s just a collection. I can listen to or reference riffs anytime, anywhere.&lt;/p>
&lt;p>I welcome any corrections. And would absolutely love more recommendations. Please &lt;a href="https://samyak.me/about/#reach-out-to-me-at">reach out to me&lt;/a>.&lt;/p>
&lt;p>The code for downloading, processing audio and the website is open sourced here: &lt;a href="https://github.com/Samyak2/tremolisto">https://github.com/Samyak2/tremolisto&lt;/a>&lt;/p></description></item><item><title>Turns out that BFS is not the same as topological sort</title><link>https://samyak.me/post/bfs-topo/</link><pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate><guid>https://samyak.me/post/bfs-topo/</guid><description>
&lt;script src="https://cdn.jsdelivr.net/npm/cytoscape@3.25.0/dist/cytoscape.min.js">&lt;/script>
&lt;p>The title may seem very obvious to people who know graph algorithms. Unfortunately, I&amp;rsquo;m not one of them.&lt;/p>
&lt;h2 id="the-problem">
The problem
&lt;a class="heading-anchor" href="#the-problem">
#
&lt;/a>
&lt;/h2>
&lt;p>This is about implementing a &lt;strong>dependency graph&lt;/strong>. Think of a project&amp;rsquo;s npm/pip/maven/cargo dependencies. Or a data pipeline with SQL tables depending on each other.&lt;/p>
&lt;p>Here is the problem that needed to be solved.
Given a project or a table (a &amp;ldquo;node&amp;rdquo;) in the tree, how do I get all the other nodes that &lt;em>depend&lt;/em> on it (the &lt;em>dependents&lt;/em>)?
In other words, if I change the given node/project/table, which other nodes will I need to recompile/recreate?
The graph is structured specifically to help with this. Given a node, we know the &lt;em>direct&lt;/em> dependents. So we just need to follow this trail to get all the dependents. The hard part here is getting the nodes in the right order. The right order is one where all dependencies of a node are &amp;ldquo;visited&amp;rdquo; before the node itself.&lt;/p>
&lt;p>At the time, it seemed that a simple breadth-first search will give me all the nodes in order. Let&amp;rsquo;s see how.&lt;/p>
&lt;h2 id="breadth-first-search-bfs">
Breadth-first search (BFS)
&lt;a class="heading-anchor" href="#breadth-first-search-bfs">
#
&lt;/a>
&lt;/h2>
&lt;p>In this graph search algorithm, we visit all the neighbours of the node in an arbitrary order. Let&amp;rsquo;s consider the direct neighbours as the first level and the neighbours of the neighbours as the second level and so on. BFS will visit all nodes on the first level before visiting all nodes on the second level and so on.&lt;/p>
&lt;p>Here&amp;rsquo;s a visualization of BFS on a graph of project dependencies. The edges indicate dependents, i.e., &lt;code>pest&lt;/code> depends on &lt;code>serde_json&lt;/code>, etc.
Feel free to pause and explore the order in which nodes are visited. You can click on a node to start BFS from that node.&lt;/p>
&lt;style>
.play-button {
--wide: 10px;
border: 0;
background: transparent;
box-sizing: border-box;
width: 0;
height: calc(var(--wide)*2);
border-color: transparent transparent transparent #F6F6F6;
transition: 100ms all ease;
cursor: pointer;
border-style: solid;
border-width: var(--wide) 0 var(--wide) calc(var(--wide)*60/37);
}
.play-button.playing {
border-style: double;
border-width: 0px 0 0px calc(var(--wide)*60/37);
}
.play-button:hover {
border-color: transparent transparent transparent #FFE2E2;
}
.generic-button {
background-color: white;
border-radius: 1rem;
border-width: 0;
margin-left: 0.5rem;
}
.generic-button.dark {
background-color: #1d2021;
}
.generic-button:hover {
cursor: pointer;
}
&lt;/style>
&lt;script>
const textColorDark = "#F6F6F6";
const textColorLight = "#454545";
const startingEl = "#1";
const traverseStarting = "#6";
const graphStyle = [
{
selector: 'node',
style: {
'background-color': '#8785A2',
'color': textColorDark,
'label': 'data(name)',
'text-valign': 'center',
'text-halign': 'right',
'text-margin-x': '3px',
}
},
{
selector: 'edge',
style: {
'width': 3,
'line-color': textColorDark,
'target-arrow-color': textColorDark,
'target-arrow-shape': 'triangle',
'curve-style': 'bezier',
'line-opacity': 0.5,
}
},
{
selector: '.light',
style: {
'color': textColorLight,
'line-color': textColorLight,
'target-arrow-color': textColorLight,
}
},
{
selector: '.traversed',
style: {
'background-color': '#FFC7C7',
'line-color': '#FFC7C7',
'target-arrow-color': '#FFC7C7',
},
},
{
selector: '.traversed.light',
style: {
'line-color': '#990000',
'target-arrow-color': '#990000',
},
},
];
const graphConfig = {
boxSelectionEnabled: false,
autoungrabify: true,
autounselectify: true,
minZoom: 0.1,
maxZoom: 5,
elements: [
{
data: {id: '1', name: 'pest'},
},
{
data: {id: '2', name: 'serde_json'},
},
{
data: {id: '3', name: 'serde'},
},
{
data: {id: '4', name: 'thiserror'},
},
{
data: {id: '5', name: 'itoa'},
},
{
data: {id: '6', name: 'ryu'},
},
{
data: {id: '7', name: 'proc-macro2'},
},
{
data: {id: '8', name: 'quote'},
},
{
data: {id: '9', name: 'syn'},
},
{
"data": {
"id": "21",
"source": "2",
"target": "1"
}
},
{
"data": {
"id": "31",
"source": "3",
"target": "1"
}
},
{
"data": {
"id": "41",
"source": "4",
"target": "1"
}
},
{
"data": {
"id": "32",
"source": "3",
"target": "2"
}
},
{
"data": {
"id": "52",
"source": "5",
"target": "2"
}
},
{
"data": {
"id": "62",
"source": "6",
"target": "2"
}
},
{
"data": {
"id": "74",
"source": "7",
"target": "4"
}
},
{
"data": {
"id": "84",
"source": "8",
"target": "4"
}
},
{
"data": {
"id": "78",
"source": "7",
"target": "8"
}
},
{
"data": {
"id": "79",
"source": "7",
"target": "9"
}
},
{
"data": {
"id": "89",
"source": "8",
"target": "9"
}
},
{
"data": {
"id": "94",
"source": "9",
"target": "4"
}
}
],
style: graphStyle,
};
const graphConfig3 = {
boxSelectionEnabled: false,
autoungrabify: true,
autounselectify: true,
minZoom: 0.1,
maxZoom: 5,
elements: [
{
data: {id: '1', name: 'pest'},
},
{
data: {id: '2', name: 'serde_json'},
},
{
data: {id: '3', name: 'serde'},
},
{
data: {id: '4', name: 'thiserror'},
},
{
data: {id: '5', name: 'itoa'},
},
{
data: {id: '6', name: 'ryu'},
},
{
data: {id: '7', name: 'proc-macro2'},
},
{
data: {id: '8', name: 'quote'},
},
{
data: {id: '9', name: 'syn'},
},
{
"data": {
"id": "21",
"source": "2",
"target": "1"
}
},
{
"data": {
"id": "41",
"source": "4",
"target": "1"
}
},
{
"data": {
"id": "32",
"source": "3",
"target": "2"
}
},
{
"data": {
"id": "52",
"source": "5",
"target": "2"
}
},
{
"data": {
"id": "62",
"source": "6",
"target": "2"
}
},
{
"data": {
"id": "84",
"source": "8",
"target": "4"
}
},
{
"data": {
"id": "78",
"source": "7",
"target": "8"
}
},
{
"data": {
"id": "73",
"source": "7",
"target": "3"
}
},
{
"data": {
"id": "79",
"source": "7",
"target": "9"
}
},
{
"data": {
"id": "94",
"source": "9",
"target": "4"
}
}
],
style: graphStyle,
};
const rootConfig = {
'text-valign': 'center',
'text-halign': 'left',
'text-margin-x': '-5px',
};
const levelOneConfig = {
'text-valign': 'top',
'text-halign': 'center',
'text-margin-x': '0',
};
const layoutConfig = (origBoundingBox) => {
return {
name: 'breadthfirst',
animate: true,
spacingFactor: 1.7,
boundingBox: {
x1: origBoundingBox.y1,
y1: origBoundingBox.x1,
x2: origBoundingBox.y2,
y2: origBoundingBox.x2
},
transform: (_node, position) => {
return {x: position.y, y: position.x}
},
}
};
&lt;/script>
&lt;div style="display: flex; justify-content: center;">
&lt;div id="bfs-graph" style="width: 100%; max-width 500px; height: 300px;">&lt;/div>
&lt;/div>
&lt;div style="display: flex; justify-content: center; height: 2rem; align-items: center;">
&lt;button class="play-button playing" id="play-button">&lt;/button>
&lt;input type="range" id="frame-num" name="frame-num" min="-1">
&lt;button class="generic-button" id="restart-button">reset&lt;/button>
&lt;/div>
&lt;script>
const cy = cytoscape({
container: document.getElementById("bfs-graph"),
...graphConfig,
});
cy.$("#1").style(rootConfig);
cy.$("#2,#3,#4").style(levelOneConfig);
cy.fit();
const origBoundingBox = cy.elements().boundingBox();
cy.layout({
roots: cy.$(startingEl),
...layoutConfig(origBoundingBox),
}).run();
cy.nodes().on("tap", (e) => {
console.log("reseting sim to tap");
resetSim(e.target);
});
let interval = null;
let previousSliderHandler = null;
let paused = false;
const slider = document.getElementById("frame-num");
const playBtn = document.getElementById("play-button");
playBtn.addEventListener("click", () => {
paused = !paused;
playBtn.classList.toggle("playing");
});
const resetSim = (traverseStartEl) => {
if (interval !== null) {
clearInterval(interval);
}
if (previousSliderHandler !== null) {
slider.removeEventListener("input", previousSliderHandler);
}
const bfsRes = cy.elements().breadthFirstSearch({
root: traverseStartEl,
directed: true,
});
const pathLen = (bfsRes.path.length - 1) / 2;
console.log("got bfs path", pathLen, bfsRes);
slider.max = pathLen;
slider.value = 0;
const sliderHandler = () => {
cy.elements().removeClass("traversed");
// console.log(slider.value);
for (let i = 0; i &lt;= slider.value; ++i) {
const pathPos = 2 * i - 1;
const nodePos = 2 * i;
if (pathPos >= 0) {
bfsRes.path[pathPos].addClass("traversed");
}
bfsRes.path[nodePos].addClass("traversed");
}
};
sliderHandler();
slider.addEventListener("input", () => {
paused = true;
playBtn.classList.remove("playing");
sliderHandler();
});
previousSliderHandler = sliderHandler;
paused = false;
playBtn.classList.add("playing");
interval = setInterval(() => {
if (!paused) {
slider.value = (Number(slider.value) + 2) % (pathLen + 2) - 1;
sliderHandler();
}
}, 1000);
};
resetSim(cy.$(traverseStarting));
document.getElementById("restart-button").addEventListener("click", () => {
resetSim(cy.$(traverseStarting));
cy.fit();
});
&lt;/script>
&lt;h2 id="topological-sort">
Topological sort
&lt;a class="heading-anchor" href="#topological-sort">
#
&lt;/a>
&lt;/h2>
&lt;p>A topological sorting is an ordering of the nodes of the graph where a node is visited only after all nodes that connect to that node are visited.
On a dependency graph, this is exactly the order we need.&lt;/p>
&lt;p>There are many different algorithms to arrive at a topological ordering. Also, a graph can have more than one valid topological ordering.&lt;/p>
&lt;p>Here&amp;rsquo;s a visualization of one such topological sorting algorithm&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> on a graph of project dependencies. The edges indicate dependents, i.e., &lt;code>pest&lt;/code> depends on &lt;code>serde_json&lt;/code>, etc.
Feel free to pause and explore the order in which nodes are visited. You can click on a node to start topological sort on that node.
Note that we are not performing topological sort on the whole graph but only the &lt;em>subgraph&lt;/em> that is accessible from the selected node.&lt;/p>
&lt;div style="display: flex; justify-content: center;">
&lt;div id="topo-graph" style="width: 100%; max-width 500px; height: 300px;">&lt;/div>
&lt;/div>
&lt;div style="display: flex; justify-content: center; height: 2rem; align-items: center;">
&lt;button class="play-button playing" id="play-button-2">&lt;/button>
&lt;input type="range" id="frame-num-2" name="frame-num-2" min="-1">
&lt;button class="generic-button" id="restart-button-2">reset&lt;/button>
&lt;/div>
&lt;script>
const cy2 = cytoscape({
container: document.getElementById("topo-graph"),
...graphConfig,
});
cy2.$("#1").style(rootConfig);
cy2.$("#2,#3,#4").style(levelOneConfig);
cy2.fit();
const origBoundingBox2 = cy2.elements().boundingBox();
cy2.layout({
roots: cy2.$(startingEl),
...layoutConfig(origBoundingBox2),
}).run();
cy2.nodes().on("tap", (e) => {
console.log("reseting sim to tap");
resetSim2(e.target);
});
let interval2 = null;
let previousSliderHandler2 = null;
let paused2 = false;
const slider2 = document.getElementById("frame-num-2");
const playBtn2 = document.getElementById("play-button-2");
playBtn2.addEventListener("click", () => {
paused2 = !paused2;
playBtn2.classList.toggle("playing");
});
function getSubgraph(cy2, root) {
let toTraverse = root.outgoers();
let subgraph = root.union(toTraverse);
while (toTraverse.length > 0) {
const consider = toTraverse[0];
toTraverse = toTraverse.splice(1);
if (consider.isNode()) {
const out = consider.outgoers();
toTraverse = toTraverse.concat(out);
subgraph = subgraph.union(out);
}
}
// console.log("subgraph", subgraph.map(e => `${e.id()} - ${e.data("name")}`));
return subgraph;
}
function topoSort(cy2, root) {
const path = [];
let subgraph = getSubgraph(cy2, root);
let free = [root];
while (free.length > 0) {
const consider = free[0];
// console.log("consider", consider.data("name"));
free = free.splice(1);
path.push(consider);
const outgoers = consider.outgoers();
// console.log("outgoers", outgoers.map(e => `${e.id()} - ${e.data("name")}`));
subgraph = subgraph.filter(e => e.id() != consider.id());
for (const outgoer of outgoers) {
if (outgoer.isEdge()) {
path.push(outgoer);
// console.log("removing edge", outgoer.id());
subgraph = subgraph.filter((e) => e.id() != outgoer.id());
}
}
for (const outgoer of outgoers) {
if (outgoer.isNode()) {
// console.log("subgraph", subgraph.map(e => `${e.id()} - ${e.data("name")}`));
const incomingEdges = subgraph.edgesTo(outgoer);
// console.log("incomingEdges", outgoer.data("name"), incomingEdges.map(e => `${e.id()}`));
if (incomingEdges.length == 0) {
free.push(outgoer);
}
}
}
}
console.log("path", path);
return path;
}
const resetSim2 = (traverseStartEl) => {
if (interval2 !== null) {
clearInterval(interval2);
}
if (previousSliderHandler2 !== null) {
slider2.removeEventListener("input", previousSliderHandler2);
}
const path = topoSort(cy2, traverseStartEl);
const pathNodesOnly = path.filter(e => e.isNode());
const pathLen = pathNodesOnly.length - 1;
console.log("got topo path", pathLen, path);
slider2.max = pathLen;
slider2.value = 0;
const sliderHandler = () => {
cy2.elements().removeClass("traversed");
// console.log(slider.value);
for (let i = 0; i &lt;= slider2.value; ++i) {
const node = pathNodesOnly[i];
cy2.$(`#${node.id()}`).addClass("traversed");
const edges = node.outgoers().filter(e => e.isEdge());
edges.addClass("traversed");
}
};
sliderHandler();
slider2.addEventListener("input", () => {
paused2 = true;
playBtn2.classList.remove("playing");
sliderHandler();
});
previousSliderHandler2 = sliderHandler;
paused2 = false;
playBtn2.classList.add("playing");
interval2 = setInterval(() => {
if (!paused2) {
slider2.value = (Number(slider2.value) + 2) % (pathLen + 2) - 1;
sliderHandler();
}
}, 1000);
};
resetSim2(cy2.$(traverseStarting));
document.getElementById("restart-button-2").addEventListener("click", () => {
resetSim2(cy2.$(traverseStarting));
cy2.fit();
});
&lt;/script>
&lt;h2 id="bfs-vs-topological-sort---where-do-they-differ">
BFS vs Topological sort - where do they differ?
&lt;a class="heading-anchor" href="#bfs-vs-topological-sort---where-do-they-differ">
#
&lt;/a>
&lt;/h2>
&lt;p>As we see from the simulations above, when we perform BFS and topological sort starting with the node &lt;code>ryu&lt;/code>, we get the same path (or ordering) in both cases.&lt;/p>
&lt;p>So it can seem like BFS, which is much simpler to implement, works when you actually need a topological ordering. Depending on your graph, it may even work for all nodes in your graph. But of course, BFS makes no guarantees that all dependencies will be completed before visiting a node. It just happened to work for that particular graph or that particular node.&lt;/p>
&lt;!-- With graph algorithms especially, it's important to test your algorithms on graphs beyond your use case. Things may *look* right but will fail in unexpected ways. -->
&lt;p>Let&amp;rsquo;s see an example of this. Click on the &lt;code>quote&lt;/code> node on the graphs above. Or use this button to do so.&lt;/p>
&lt;a href="#bfs-graph">
&lt;button class="generic-button" id="demo-node-1">Start simulations with `quote`&lt;/button>
&lt;/a>
&lt;script>
document.getElementById("demo-node-1").addEventListener("click", () => {
resetSim2(cy2.$("#8"));
resetSim(cy.$("#8"));
});
&lt;/script>
&lt;script>
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
anchor.addEventListener('click', function (e) {
e.preventDefault();
document.querySelector(this.getAttribute('href')).scrollIntoView({
behavior: 'smooth'
});
});
});
&lt;/script>
&lt;p>The order in which BFS visits the nodes is obviously wrong! It visits &lt;code>thiserror&lt;/code> before &lt;code>syn&lt;/code>. That is equivalent to compiling a package before all of its dependencies are compiled. The topological sort is correct, because by definition, it needs to visit all the dependencies before visiting a node.&lt;/p>
&lt;p>Some of the other nodes in the example graph show this behavior too. For example, &lt;code>serde&lt;/code> and &lt;code>proc-macro2&lt;/code>. So why did I use BFS for this use case in the first place?&lt;/p>
&lt;h2 id="when-are-they-the-same">
When are they the same?
&lt;a class="heading-anchor" href="#when-are-they-the-same">
#
&lt;/a>
&lt;/h2>
&lt;p>In some cases though, you can get BFS to give you the same ordering of nodes that a full fledged topological sort can. Since BFS is much easier to implement, it can be a good choice.&lt;/p>
&lt;p>Here&amp;rsquo;s an example graph that shows this behavior. This is simple BFS, but it visits the nodes in the correct order.&lt;/p>
&lt;div style="display: flex; justify-content: center;">
&lt;div id="bfs-graph-3" style="width: 100%; max-width 500px; height: 300px;">&lt;/div>
&lt;/div>
&lt;div style="display: flex; justify-content: center; height: 2rem; align-items: center;">
&lt;button class="play-button playing" id="play-button-3">&lt;/button>
&lt;input type="range" id="frame-num-3" name="frame-num" min="-1">
&lt;button class="generic-button" id="restart-button-3">reset&lt;/button>
&lt;/div>
&lt;script>
const cy3 = cytoscape({
container: document.getElementById("bfs-graph-3"),
...graphConfig3,
});
cy3.$("#1").style(rootConfig);
cy3.$("#2,#3,#4,#5,#6,#8,#9").style(levelOneConfig);
cy3.fit();
const origBoundingBox3 = cy3.elements().boundingBox();
cy3.layout({
roots: cy3.$(startingEl),
...layoutConfig(origBoundingBox3),
}).run();
cy3.nodes().on("tap", (e) => {
console.log("reseting sim to tap");
resetSim3(e.target);
});
let interval3 = null;
let previousSliderHandler3 = null;
let paused3 = false;
const slider3 = document.getElementById("frame-num-3");
const playBtn3 = document.getElementById("play-button-3");
playBtn3.addEventListener("click", () => {
paused3 = !paused3;
playBtn3.classList.toggle("playing");
});
const resetSim3 = (traverseStartEl) => {
if (interval3 !== null) {
clearInterval(interval3);
}
if (previousSliderHandler3 !== null) {
slider3.removeEventListener("input", previousSliderHandler3);
}
const bfsRes = cy3.elements().breadthFirstSearch({
root: traverseStartEl,
directed: true,
});
const pathLen = (bfsRes.path.length - 1) / 2;
console.log("got bfs path", pathLen, bfsRes);
slider3.max = pathLen;
slider3.value = 0;
const sliderHandler = () => {
cy3.elements().removeClass("traversed");
// console.log(slider.value);
for (let i = 0; i &lt;= slider3.value; ++i) {
const pathPos = 2 * i - 1;
const nodePos = 2 * i;
if (pathPos >= 0) {
bfsRes.path[pathPos].addClass("traversed");
}
bfsRes.path[nodePos].addClass("traversed");
}
};
sliderHandler();
slider3.addEventListener("input", () => {
paused3 = true;
playBtn3.classList.remove("playing");
sliderHandler();
});
previousSliderHandler3 = sliderHandler;
paused3 = false;
playBtn3.classList.add("playing");
interval3 = setInterval(() => {
if (!paused3) {
slider3.value = (Number(slider3.value) + 2) % (pathLen + 2) - 1;
sliderHandler();
}
}, 1000);
};
const traverseStarting3 = "#7";
resetSim3(cy3.$(traverseStarting3));
document.getElementById("restart-button-3").addEventListener("click", () => {
resetSim3(cy3.$(traverseStarting3));
cy3.fit();
});
function customThemeCallback(theme) {
console.log(theme);
let textColor;
if (theme == 'dark') {
textColor = textColorDark;
cy.$('node').removeClass('light');
cy.$('edge').removeClass('light');
cy2.$('node').removeClass('light');
cy2.$('edge').removeClass('light');
cy3.$('node').removeClass('light');
cy3.$('edge').removeClass('light');
} else {
textColor = textColorLight;
cy.$('node').addClass('light');
cy.$('edge').addClass('light');
cy2.$('node').addClass('light');
cy2.$('edge').addClass('light');
cy3.$('node').addClass('light');
cy3.$('edge').addClass('light');
}
playBtn.style.borderLeftColor = textColor;
playBtn2.style.borderLeftColor = textColor;
playBtn3.style.borderLeftColor = textColor;
}
customThemeCallback(currentTheme);
&lt;/script>
&lt;p>The requirement for this behavior is that all the nodes must be connected to only their &lt;em>direct dependents&lt;/em>. If any node is connected to both a node and a connection of that node, BFS will not work.&lt;/p>
&lt;h2 id="conclusion">
Conclusion
&lt;a class="heading-anchor" href="#conclusion">
#
&lt;/a>
&lt;/h2>
&lt;p>Comparing BFS and Topological sort is like comparing an apple and a bicycle. Sometimes, you don&amp;rsquo;t need to go out to a restaurant when an apple in the fridge will do.&lt;/p>
&lt;p>That is to say, in some cases BFS will do what you need without having to implement topological sort.&lt;/p>
&lt;p>Thank you for reading!&lt;/p>
&lt;h2 id="further-reading">
Further reading
&lt;a class="heading-anchor" href="#further-reading">
#
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/a/62969342/11199009">The original stackoverflow answer that prompted this post&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/a/44986459">Using BFS &lt;em>for&lt;/em> topological sort - stackoverflow&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Topological_sorting#Algorithms">Other algorithms for topological sorting - Wikipedia&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Acknowledgements: Thank you, &lt;em>Sathvik Srinivas&lt;/em>, for proofreading and suggesting improvements to this post.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Topological_sorting#Kahn's_algorithm">Kahn&amp;rsquo;s algorithm&lt;/a> but only on the subgraph accessible from the selected node.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Thoughts on migrating DNS from Netlify to Cloudflare</title><link>https://samyak.me/post/netlify-cloudflare/</link><pubDate>Wed, 19 Apr 2023 19:07:07 +0530</pubDate><guid>https://samyak.me/post/netlify-cloudflare/</guid><description>&lt;p>Recently, I was involved in the migration of a domain from &lt;a href="https://docs.netlify.com/domains-https/netlify-dns/">Netlify DNS&lt;/a> to &lt;a href="https://www.cloudflare.com/dns/">Cloudflare&lt;/a>.
This short post describes my experiences and thoughts on it.&lt;/p>
&lt;h2 id="why-cloudflare">
Why Cloudflare?
&lt;a class="heading-anchor" href="#why-cloudflare">
#
&lt;/a>
&lt;/h2>
&lt;!-- Because it provides an easy to set up CDN and a reverse proxy. Netlify's DNS was very basic in comparison. -->
&lt;p>We were moving our static sites away from Netlify anyway and it did not make sense to keep it just for the basic DNS it provides.&lt;/p>
&lt;p>Also because Cloudflare provides an easy to set up &lt;a href="https://www.cloudflare.com/cdn/">CDN&lt;/a> and a &lt;a href="https://developers.cloudflare.com/dns/manage-dns-records/reference/proxied-dns-records/#proxied-records">reverse proxy&lt;/a>.&lt;/p>
&lt;!-- ## Why were you using Netlify for DNS anyway? -->
&lt;!-- No idea. -->
&lt;h2 id="why-not-route53">
Why not Route53?
&lt;a class="heading-anchor" href="#why-not-route53">
#
&lt;/a>
&lt;/h2>
&lt;p>We have the rest of the infra on AWS, so &lt;a href="https://aws.amazon.com/route53/">Route53&lt;/a> would have made some things easier. But all eggs in one basket ¯\_(ツ)_/¯&lt;/p>
&lt;h2 id="how-hard-was-it">
How hard was it?
&lt;a class="heading-anchor" href="#how-hard-was-it">
#
&lt;/a>
&lt;/h2>
&lt;p>The hardest part was moving all of the DNS records. Cloudflare tries to scan for and &lt;a href="https://developers.cloudflare.com/dns/zone-setups/full-setup/setup/#review-dns-records">automatically add existing records&lt;/a>, but it missed most of our records - especially CNAME records. It did get the MX records right.&lt;/p>
&lt;p>The only way to add records - other than manually adding each one - is to use a &lt;a href="https://en.wikipedia.org/wiki/Zone_file">zone file&lt;/a>. The problem now was that Netlify DNS could not export records to a zone file. What it did provide was an &lt;a href="https://open-api.netlify.com/#tag/dnsZone/operation/getDnsRecords">API to list all records&lt;/a>. So I used the data from this API to programmatically generate a zone file.&lt;/p>
&lt;p>I have open sourced this tool here: &lt;a href="https://github.com/Samyak2/netlify-dns-zone-file">&lt;strong>Netlify DNS Zone File Generator&lt;/strong>&lt;/a>&lt;/p>
&lt;p>Then we simply imported this zone file in Cloudflare. We changed the nameservers in our domain registrars to Cloudflare&amp;rsquo;s and it took less than 30 mins for them to verify it - Cloudflare notes that this can take up to 24 hours.&lt;/p>
&lt;p>Cloudflare enabled proxying by default for the imported records, so we did not have to do anything more to enable the CDN and reverse proxy. So all good then?&lt;/p>
&lt;p>Nope. Our websites were not working in certain browsers - it showed an SSL/TLS error.&lt;/p>
&lt;h2 id="your-website-was-down">
Your website was down???
&lt;a class="heading-anchor" href="#your-website-was-down">
#
&lt;/a>
&lt;/h2>
&lt;p>So Cloudflare has an SSL/TLS mode called &amp;ldquo;Flexible&amp;rdquo; which, apparently, &amp;ldquo;Encrypts traffic between the browser and Cloudflare&amp;rdquo;. Turns out that it&amp;rsquo;s not really flexible. It adds its own SSL/TLS on all proxied domains and that &lt;a href="https://community.cloudflare.com/t/cloudflare-all-time-classic-how-to-fix-error-code-ssl-error-no-cypher-overlap/314844">caused a problem&lt;/a>. We changed the mode to &amp;ldquo;Full&amp;rdquo; which just means that the servers manage their own SSL/TLS.&lt;/p>
&lt;p>I&amp;rsquo;m not really sure what the exact issue here was, but I would be interested in figuring it out.&lt;/p></description></item><item><title>Mob Programming and Rust</title><link>https://samyak.me/post/mob/</link><pubDate>Sun, 29 May 2022 16:30:31 +0530</pubDate><guid>https://samyak.me/post/mob/</guid><description>&lt;h1 id="what-is-it">
What is it?
&lt;a class="heading-anchor" href="#what-is-it">
#
&lt;/a>
&lt;/h1>
&lt;p>I see Mob Programming as an extension to &lt;a href="https://en.wikipedia.org/wiki/Pair_programming">Pair Programming&lt;/a> where two people work on the same code on the same computer — one &lt;em>drives&lt;/em> the keyboard while the other &lt;em>navigates&lt;/em> the driver. A &lt;em>mob&lt;/em> is when you have three or more people working this way, each taking their turn to be the driver while the others navigate.&lt;/p>
&lt;p>Have you ever wanted to just think about what needs to be done and the code for it automagically gets written? &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> Well, I have. In its ideal form, this is what pair/mob programming would do — navigator(s) simply think about and express their idea of what needs to happen and the driver magically gets it done.
In the real world though, this does not happen. The driver may have other ideas, the navigator(s)&amp;rsquo; idea may not make sense, the driver may not (yet!) know how to do what the navigator needs and all the other problems that come with communication between humans.
What ends up happening is a lot of discussion, a lot of learning, a lot of teaching and all in all, good times.&lt;/p>
&lt;h1 id="but-why">
But why?
&lt;a class="heading-anchor" href="#but-why">
#
&lt;/a>
&lt;/h1>
&lt;p>If that was not enough to convince you, here&amp;rsquo;s some other reasons how Mob Programming helps:&lt;/p>
&lt;ul>
&lt;li>All of the code is written with &lt;em>everyone&lt;/em> present, including reviewers. There&amp;rsquo;s no need to wait for a code review and all the back-and-forth that comes with it.&lt;/li>
&lt;li>This tweet by Dawn captures what I wanted to say here:
&lt;blockquote class="twitter-tweet" data-theme='dark' data-align='center'>
&lt;p lang="en" dir="ltr">It&amp;#39;s a nudist activity. How each member operates their terminal, editor, VCS, WM... is in the open. How each thinks is all but exposed. If you&amp;#39;re willing to go through with it you&amp;#39;ll learn so much. Come as you are. Let it all hang out. Metaphorically. &lt;a href="https://twitter.com/hashtag/mobprogramming?src=hash&amp;amp;ref_src=twsrc%5Etfw">#mobprogramming&lt;/a> &lt;a href="https://twitter.com/hashtag/moborblob?src=hash&amp;amp;ref_src=twsrc%5Etfw">#moborblob&lt;/a>&lt;/p>&amp;mdash; Shahar Dawn Or (@mightyiam) &lt;a href="https://twitter.com/mightyiam/status/1522906956452679680?ref_src=twsrc%5Etfw">May 7, 2022&lt;/a>
&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;/li>
&lt;li>The work that is produced is of a higher quality than what a single person could do. It&amp;rsquo;s a combined product of the experiences of everyone in the mob.&lt;/li>
&lt;li>You won&amp;rsquo;t use a hacky solution or a workaround unless everyone agrees that that is the best way to do it.&lt;/li>
&lt;li>If it&amp;rsquo;s a side project or something else that you do in your free time, doing it together with a mob really gives you motivation. You look forward to doing it everyday with the mob. For me personally, mob programming was the only time I did something (almost) everyday, consistently for months &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/li>
&lt;/ul>
&lt;h1 id="its-mobbin-time-3">
It&amp;rsquo;s Mobbin&amp;rsquo; time &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>
&lt;a class="heading-anchor" href="#its-mobbin-time-3">
#
&lt;/a>
&lt;/h1>
&lt;p>I have been a part of a mob for a few months now. At &lt;a href="https://github.com/mobusoperandi">Mobus Operandi&lt;/a> &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>, I&amp;rsquo;m a part of Mob Otter that works on &lt;a href="https://github.com/mobusoperandi/michie">michie&lt;/a> — a Rust macro that adds memoization to any function. I started when I knew nothing about Rust macros and when I was a beginner in Rust. I learnt a lot about Rust (declarative macros, procedural macros, &lt;code>static&lt;/code>, generics, traits, &lt;code>Any&lt;/code>, &lt;code>Once&lt;/code> and a lot more), Git, Shell/bash, Nix and non-technical things like communication/collaboration, teaching and learning &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Thank you &lt;a href="https://twitter.com/mightyiam">Dawn&lt;/a> for inviting me to Mobus Operandi and thank you to everyone in Mob Otter for helping me grow &amp;lt;3.&lt;/p>
&lt;h1 id="it-may-not-be-for-everyone">
It may not be for everyone
&lt;a class="heading-anchor" href="#it-may-not-be-for-everyone">
#
&lt;/a>
&lt;/h1>
&lt;p>While I think mobbing is great, not everyone will like it and it may not fit in certain organizations.&lt;/p>
&lt;p>It also depends on your particular mob. Having one person who is significantly more advanced in the domain than the others may lead to that person being bored and not getting much out of it. On the other hand, having one person who is relatively new to the domain may lead to them slowing the mob down and they may feel insecure about it (our friend, the imposter syndrome, also does not help here). To alleviate this, Mobus Operandi has separate mobs for beginner, intermediate and advanced Rust programmers. That being said, mobs are all about learning. Do not hesitate to join mobs that are working on things you haven&amp;rsquo;t touched before. After all, you are not doing it alone and your mob will always be with you to help you learn!&lt;/p>
&lt;p>Mob programming may not be a good fit for organizations where individual responsibility is encouraged, where not more than 2 people are working on a thing at a time and where moving quickly and efficiently is the top priority. It could be seen as a waste of time to have 3-5 people in the team on a single call for a couple of hours when each person is working on separate components.&lt;/p>
&lt;p>Mobbing also requires a certain level of commitment. For example, a mob that runs on weekdays for 2 hours each day means a commitment of 10 hours every week. Though this is small enough to be done along with a day job, it&amp;rsquo;s a matter of personal choice.&lt;/p>
&lt;h1 id="where-to-go-from-here">
Where to go from here
&lt;a class="heading-anchor" href="#where-to-go-from-here">
#
&lt;/a>
&lt;/h1>
&lt;p>Consider joining &lt;a href="https://github.com/mobusoperandi/">Mobus Operandi&lt;/a> if you want to learn Rust in a remote mob programming format.&lt;/p>
&lt;p>Dawn had a &lt;a href="https://youtu.be/nxNDo-7Fyfk">nice discussion&lt;/a> with the folks at the &lt;a href="https://www.youtube.com/channel/UCgt1lVMrdwlZKBaerxxp2iQ">Mob Mentality Show&lt;/a> about Mobus Operandi, Rust, mob for hire and teal organizations.&lt;/p>
&lt;p>&lt;a href="https://youtu.be/28S4CVkYhWA">Here&amp;rsquo;s&lt;/a> a talk on mob programming by Woody Zuill who popularized the concept.&lt;/p>
&lt;hr>
&lt;p>This what I think of mob programming. I realize that this reads like an appreciation post xD. &lt;a href="https://samyak.me/about#reach-out-to-me-at">Reach out to me&lt;/a> if you have any thoughts.&lt;/p>
&lt;p>Side note: my appreciation for mob programming has nothing to do with the fact that the character in my profile picture (on my website, GitHub, Twitter, etc.) is nicknamed Mob :)&lt;/p>
&lt;p>Acknowledgements: Thank you, &lt;em>Sathvik Srinivas&lt;/em>, for proofreading and suggesting improvements to this post.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>We don&amp;rsquo;t talk about Copilot here.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>This does not include things that have a clear incentive, such as school/university or job.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Did you know that in the highest-grossing superhero movie of all time, &lt;em>Morbius&lt;/em>, the title character, &lt;em>Morbius&lt;/em>, does not actually say &amp;ldquo;It&amp;rsquo;s &lt;em>Morbin&lt;/em> time&amp;rdquo; because it would not fit the character &lt;em>Morbius&lt;/em> whose actual name is Dr. &lt;em>Morbius&lt;/em>&lt;a href="https://knowyourmeme.com/memes/its-morbin-time">?&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>BTW this is such a great name :o&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>As a small (and easy to explain) example, I used to skip straight to the answer section on stackoverflow. I learnt that it&amp;rsquo;s useful to skim through the question to see if it&amp;rsquo;s really what I need.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Hello there!</title><link>https://samyak.me/post/first/</link><pubDate>Sat, 28 Aug 2021 23:36:15 +0530</pubDate><guid>https://samyak.me/post/first/</guid><description>&lt;p>Hi!
&lt;img class="smol-logo" src="https://samyak.me/img/logo.png" />
&lt;/p>
&lt;p>I&amp;rsquo;m Samyak Sarnayak. This post is mostly a placeholder to test &lt;a href="https://gohugo.io/">Hugo&lt;/a> and the &lt;a href="https://gitlab.com/avron/gruvhugo">gruvhugo&lt;/a> theme.&lt;/p>
&lt;p>After porting over my old posts here, I have planned for a few more. Hopefully I will get to them soon.&lt;/p>
&lt;p>The &lt;a href="https://samyak.me/about">about&lt;/a> page will be the first one to be filled here, after this one of course.&lt;/p>
&lt;style>
.smol-logo {
height: 1em;
position: relative;
animation-duration: 1s;
animation-name: slidedown;
animation-iteration-count: infinite;
animation-direction: alternate;
}
p {
overflow: hidden;
}
@keyframes slidedown {
from {
top: 1.5em;
}
75% {
top: 0.3em;
}
to {
top: 0.2em;
}
}
&lt;/style></description></item><item><title>On water and systems</title><link>https://samyak.me/post/water-docker/</link><pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate><guid>https://samyak.me/post/water-docker/</guid><description>&lt;p>There&amp;rsquo;s a lake a few hundred meters from your house, with plenty of water in it. Can you actually use the water though? Sure, you can take a bucket to the lake, fill it up, bring it back and use it. You&amp;rsquo;ll need more than a bucket of water, so you make multiple trips and take two buckets at a time. Now you&amp;rsquo;re spending quite a bit of your time and energy everyday in this. To make your life easier, you build a rudimentary plumbing system. You take a long enough pipe, connect a motor and that&amp;rsquo;s it, you now have easy access to water. You can use this, but what about your neighbour, your colony? Everyone will need to build their own pipelines, which isn&amp;rsquo;t sustainable as every one of them needs to do all of the maintenance themselves, costing a lot of time and resources. You would need a real plumbing system that has robust pipes, a temporary storage (a tank), a better motor and you would have to rethink your home&amp;rsquo;s architecture to stuff all the pipes in there. Only then do you get water at your tap.&lt;/p>
&lt;p>My point is that you could say that the water is right there but it&amp;rsquo;s not actually useful without all the plumbing around it. With the plumbing it&amp;rsquo;s a lot more convenient to do the things you do with water as you have it right at your tap, anytime you need it.&lt;/p>
&lt;hr>
&lt;p>I realized this when I was brushing my teeth one morning. The day before, I was working on &lt;a href="https://github.com/Samyak2/guntainer">making my own container runtime&lt;/a> to learn how containers work. I made a connection between this water story and containers.
Namespaces and cgroups in Linux together let you isolate a process and limit the amount of resources it can use. That is basically what containers do, but to use them you need to jump through lots of hoops. My container runtime is that rudimentary pipeline that works but isn&amp;rsquo;t sustainable and cannot be (or will not be) used by anyone other than me. To make this useful you would need an entire system that is maintained by a group of people who know what they are doing - like &lt;a href="https://www.docker.com/">Docker&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>Whenever there&amp;rsquo;s a discussion of using Linux over Windows/MacOS, one argument that often comes up is that Linux allows you to do basically anything you want to and if you miss a feature from Windows/MacOS you can implement it yourself or use a community made alternative (if it exists). Again, the difference between something being possible and actually usable is bigger than what AWS Infinidash will be in a few months (trust me it&amp;rsquo;s going to huge :)).
One example of this is MacOS&amp;rsquo; Time Machine - the snapshot tool. On Linux, &lt;a href="https://btrfs.wiki.kernel.org/index.php/Main_Page">Btrfs&lt;/a> supports snapshots but to use it you need an app that makes managing snapshots easier (&lt;a href="http://snapper.io/">snapper&lt;/a> is one).&lt;/p>
&lt;hr>
&lt;p>Those were my thoughts. I realize that this is quite obvious in hindsight, but I wanted to share this anyway. Have you noticed this pattern somewhere else? Let me know down below or reach out to me on any of the links to the left.&lt;/p>
&lt;p>Thank you for reading. Bye!&lt;/p></description></item><item><title>Solving A Git Murder Mystery</title><link>https://samyak.me/post/gitstery/</link><pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate><guid>https://samyak.me/post/gitstery/</guid><description>&lt;p>On the night of Friday the 13th, I came across an &lt;a href="https://github.com/nivbend/gitstery">interesting repository&lt;/a> on GitHub.
At first I did not understand what it was, after all &amp;ldquo;gitstery&amp;rdquo; is not a very obvious name. I read through the README
(seems like I missed the part where they say it was designed to be solved using git commands alone) and got some idea of
what it was. It seemed really interesting and I was bored, so I cloned it. There was an &lt;code>instructions.txt&lt;/code> file which
contained&amp;hellip;. instructions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>A murder had been committed in Git Town!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>The detective, Kyle Pumbinner, said the crime scene report is on the `gtpd-archive` branch. He
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>doesn&amp;#39;t really remember the report ID... But he knows it was the first report he submitted after his
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>son&amp;#39;s ninth birthday (which was Saturday, July 20th), and it was the only report he submitted that
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>week.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>When you find a suspect, you&amp;#39;d probably want to interview them. To do that, first find out their
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>address. To go to that street, look for the street&amp;#39;s name in the repository (Hint: it&amp;#39;s a tag). To
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>go to house number N on that street, go to the Nth ancestor. If you&amp;#39;d like to inspect the
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>perimeters, you can look into the commit&amp;#39;s contents - it&amp;#39;ll contain a hash that you can view with
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>certain git commands.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>Think you found the culprit? Check your answer with the following command:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> echo &amp;#34;John Doe&amp;#34; | git hash-object --stdin | grep -iq -f /dev/stdin &amp;lt;(git show solution) &amp;amp;&amp;amp; echo &amp;#39;You found the murderer!&amp;#39; || echo &amp;#39;No cigar, chief... Try again.&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>Replace John Doe with the name of the suspect that you want to check.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>For an extra challenge, try and solve the mystery without ever using `git checkout`.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Spoiler Warning&lt;/strong>: The following section contains spoilers for gitstery. I suggest you try it on your own before reading. Or you can read this as a guide.
{: .notice&amp;ndash;warning}&lt;/p>
&lt;p>The instructions hint that we need to check out the &lt;code>gtpd-archive&lt;/code> branch. We can do so by using &lt;code>git checkout gtpd-archive&lt;/code>.
It seems there is no difference between the two branches, all the files are the same.&lt;/p>
&lt;figure>&lt;img src="https://samyak.me/images/gitstery/gitstery-files.webp"
alt="Files in the gtpd-archive branch" width="100%">&lt;figcaption>
&lt;p>Files in the gtpd-archive branch&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>So we check the logs, using &lt;code>git log&lt;/code> and we see all the reports here. The date starts from December and, as indicated by
the instructions files, we need to find the logs which were submitted in the week after July 20th. We can search the log
by typing &lt;code>/July&lt;/code> and pressing the &lt;code>n&lt;/code> key to go to the next search result. There is only one report by Kyle Pumbinner in
that week.&lt;/p>
&lt;figure>&lt;img src="https://samyak.me/images/gitstery/gitstery-log-July-24.webp"
alt="Git log showing the report we need" width="100%">&lt;figcaption>
&lt;p>Git log showing the report we need&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Hmm, so we need to check out the &lt;code>detectives/kpumbinner&lt;/code> branch.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>git checkout detectives/kpumbinner
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://samyak.me/images/gitstery/gitstery-kpumbineer-branch-files.webp"
alt="Files in the detectives/kpumbinner branch" width="100%">&lt;figcaption>
&lt;p>Files in the detectives/kpumbinner branch&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Here we have a new directory with an &lt;code>access.log&lt;/code> inside. There are three entries of &lt;code>BACKDOOR_332&lt;/code> here, we need to find
the names of the people who made these entries. There is an aptly named git subcommand for this, it is called &lt;code>git blame&lt;/code>,
running &lt;code>git blame access.log&lt;/code> will show the names of the people who made each entry in the file. At this point you could
search through this by using &lt;code>/BACKDOOR_332&lt;/code>, but here we can use the very useful &lt;code>grep&lt;/code> tool.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>git blame access.log | grep BACKDOOR_332
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://samyak.me/images/gitstery/git-blame-grep.webp"
alt="This gives the names of the three people who accessed the backdoor" width="100%">&lt;figcaption>
&lt;p>This gives the names of the three people who accessed the backdoor&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Now, we need to investigate these people. Going back to the instructions.txt, it describes the process to investigate a
person. First, we need to find the person&amp;rsquo;s address. This is simple, we just have to search for the person&amp;rsquo;s name in the
residents.txt file. Using cat and grep commands, we can easily get the address (or you can open the files using an editor
and search in it).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>$ cat residents.txt | grep &lt;span style="color:#f1fa8c">&amp;#34;Lyndon&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Lyndon Huskupper &lt;span style="color:#bd93f9">73&lt;/span> Tamworth Drive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>$ cat residents.txt | grep &lt;span style="color:#f1fa8c">&amp;#34;Cosmo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Cosmo Siwkonk &lt;span style="color:#bd93f9">26&lt;/span> Balcombe Close
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>$ cat residents.txt | grep &lt;span style="color:#f1fa8c">&amp;#34;Brock Stuickard&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Brock Stuickard &lt;span style="color:#bd93f9">9&lt;/span> Beaconside
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Again going back to instructions.txt, we find a way to investigate the addresses. Now, we have to look for the street
name in git tags. &lt;code>git tag -l&lt;/code> lists all the tags, then we use grep to get the required tags.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>$ git tag -l | grep &lt;span style="color:#f1fa8c">&amp;#34;tamworth&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>street/tamworth_drive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>$ git tag -l | grep &lt;span style="color:#f1fa8c">&amp;#34;balcombe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>street/balcombe_close
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>$ git tag -l | grep &lt;span style="color:#f1fa8c">&amp;#34;beaconside&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>street/beaconside
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we are ready to investigate the addresses. To visit the address, we checkout that tag and inspect the files there.
Checking out tags is as simple as &lt;code>git checkout &amp;lt;tag name&amp;gt;&lt;/code>, for example &lt;code>git checkout street/tamworth_drive&lt;/code>. We see
a new file here named &lt;code>investigate&lt;/code> which contains some random letters. According to instructions.txt, this is a hash.
We haven&amp;rsquo;t reached the house number yet, so let&amp;rsquo;s do that. With the hint from instructions.txt, we look at the logs.
The contents have the house number, street name and the investigation report/conversation. We can search for &lt;code>/73 &lt;/code>
(notice the space after 73, this is because the commit hashes can also contain the number 73) and get the investigation
result.&lt;/p>
&lt;pre tabindex="0">&lt;code>commit f8a5b218b1eaee3b111ae5ef536f919e8d3afca2
Author: Dolores Wholfump &amp;lt;mayor@gittown.gov&amp;gt;
Date: Tue Jan 1 00:00:00 2019 +0000
73 Tamworth Drive
No one&amp;#39;s home...
Maybe take a look around the perimeter?
&lt;/code>&lt;/pre>&lt;p>How do we look around? That&amp;rsquo;s easy, we simply checkout that commit and take a look at the files. To checkout to a
specific commit, copy the commit hash and do &lt;code>git checkout &amp;lt;commit hash here&amp;gt;&lt;/code> like &lt;code>git checkout f8a5b218b1eaee3b111ae5ef536f919e8d3afca2&lt;/code>.
We can see that the &lt;code>investigate&lt;/code> file has changed, so we need to somehow get the actual contents of it. For that,
we use a git subcommand called &lt;code>cat-file&lt;/code> can be used, this subcommand is used to find information about repository
objects (which are hashed). &lt;code>git cat-file -t&lt;/code> is used to get the object&amp;rsquo;s type (in this case, it is a blob which is
a general type for files in git) and &lt;code>git cat-file -p&lt;/code> is used to print the object&amp;rsquo;s content.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>$ cat investigate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>22f733298423b814f1da31bee3e0063c72ed6e71
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>$ git cat-file -p 22f733298423b814f1da31bee3e0063c72ed6e71
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&amp;#34;There&amp;#39;s no one answering the door. Obviously you won&amp;#39;t break in because you don&amp;#39;t have a warrant or
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">anything. But nothing&amp;#39;s wrong with looking around the place...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">You check around the house, there&amp;#39;s no car. Not even a driveway. You do find a bike resting against
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">the fence. It&amp;#39;s pretty close to the factory, so makes sense the suspect bikes to work.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">Just to make sure, you ask some of the neighbors, they confirm that the suspect doesn&amp;#39;t own a car.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">One of them says he doesn&amp;#39;t even have a license.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">Another neighbor says he saw the suspect coming back from work on the day of the murder at about
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">5PM, they chatted for a bit before his sister picked him up to visit their parents. They live pretty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">far away, so that places him away from Git Town at the time of the murder.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hmm, looks like this one is not our culprit. (They seem to emphasize having a car a lot for some reason&amp;hellip;).
We can now look at the other suspects.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>$ git checkout street/balcombe_close
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>$ git log | grep -5 &lt;span style="color:#f1fa8c">&amp;#34;26 &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>commit bc6870d8093a33d9a69acc94a1cda16ee2d7195d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>Author: Dolores Wholfump &amp;lt;mayor@gittown.gov&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>Date: Tue Jan &lt;span style="color:#bd93f9">1&lt;/span> 00:00:00 &lt;span style="color:#bd93f9">2019&lt;/span> +0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> 26 Balcombe Close
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> No one&amp;#39;s home...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> You can take a look around though.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>$ git checkout bc6870d8093a33d9a69acc94a1cda16ee2d7195d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>HEAD is now at bc6870d &lt;span style="color:#bd93f9">26&lt;/span> Balcombe Close
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>$ cat investigate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>c8411c73e49372dbdb644beef2ea841b403fc476
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>$ git cat-file -p c8411c73e49372dbdb644beef2ea841b403fc476
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&amp;#34;Nobody&amp;#39;s home. From the stack of letters in the mailbox nobody&amp;#39;s been here for a good few days.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">Without a warrant you can&amp;#39;t get into the house, but you can still checkout the area. Maybe talk with
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">some of the neighbors.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">The guy next door says he barely ever spoke to the suspect, &amp;#34;&lt;/span>was a bit of a loner&lt;span style="color:#f1fa8c">&amp;#34; is what he says.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">Doesn&amp;#39;t know what type of vehicle he drives.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">You take a stroll around the house, there&amp;#39;s a back porch that probably seen better days. You spot a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">driveway next to it leading to a garage. The door&amp;#39;s open and you see a green Hyundai parked there.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hmm. Strange. Now onto the third suspect.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>$ git checkout street/beaconside
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>HEAD is now at 5e37024 Beaconside
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>$ git log | grep -B &lt;span style="color:#bd93f9">4&lt;/span> -A &lt;span style="color:#bd93f9">21&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; 9 &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>commit 92f6e05c6aa06c791f402d7e19649fa1f0ec76c6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>Author: Dolores Wholfump &amp;lt;mayor@gittown.gov&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>Date: Tue Jan &lt;span style="color:#bd93f9">1&lt;/span> 00:00:00 &lt;span style="color:#bd93f9">2019&lt;/span> +0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> 9 Beaconside
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> Yeah, of course I used the backdoor to the factory, that&amp;#39;s the closest entrance to the freezer and I
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> brought in some ingrediants that can&amp;#39;t really stand the heat.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> At the time of the murder I was at a block party right down the street from here, we threw the party
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> for one of the neighbors who got back from the hospital after an accident. I was with my kids. You
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> can ask anyone who&amp;#39;s been there.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> Oh wait, you know what? We took a picture... Let me get my phone.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> See? That&amp;#39;s me, that&amp;#39;s the neighbor, here&amp;#39;s my little girl. And you see the timestamp?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> So yeah, I really don&amp;#39;t have anything to do with that... Barely knew the victim...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> But you know what? I did see someone rushing out of the factory... He got into a green Hyundai, you
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> don&amp;#39;t see many of those around here... Probably a rental. I didn&amp;#39;t catch his face, was just weird
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> seeing someone running off like that... Come to think about it, maybe that person had something to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> do with it?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> Anyways, best of luck catching whoever did it!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span>$ git checkout 92f6e05c6aa06c791f402d7e19649fa1f0ec76c6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span>Previous HEAD position was 5e37024 Beaconside
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span>HEAD is now at 92f6e05 &lt;span style="color:#bd93f9">9&lt;/span> Beaconside
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>$ cat investigate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>d1278ebc164050fe1e5526fbba6a8cfbe763f1d2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>$ git cat-file -p d1278ebc164050fe1e5526fbba6a8cfbe763f1d2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span>You ask around with the neighbors, just to make sure. Everyone you ask verify that suspect&amp;#39;s alibi.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aha, we have a new lead. The culprit has a green Hyundai. As we saw before, the second suspect has a
green Hyundai. That suspect&amp;rsquo;s name is Cosmo Siwkonk. We can now verify if we have solved the case by
using the command given in instructions.txt.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>$ &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Cosmo Siwkonk&amp;#34;&lt;/span> | git hash-object --stdin | grep -iq -f /dev/stdin &amp;lt;&lt;span style="color:#ff79c6">(&lt;/span>git show solution&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;You found the murderer!&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">||&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;No cigar, chief... Try again.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>You found the murderer!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="video-container" style="padding: 0% 10%;">
&lt;video autoplay="autoplay" muted="true" loop="loop" preload="auto" style="width: 100%">
&lt;source src="https://samyak.me/images/yes-yes-yes.mp4" type="video/mp4" />
&lt;/video>
&lt;/div>
&lt;p>We solved the case!&lt;/p>
&lt;p>Well, that was fun. Checkout the repository &lt;a href="https://github.com/nivbend/gitstery">here&lt;/a>.
Give a thumbs up if this was helpful and/or interesting.&lt;/p></description></item><item><title>My old games</title><link>https://samyak.me/post/my-old-games/</link><pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate><guid>https://samyak.me/post/my-old-games/</guid><description>&lt;p>When I was in school, about 6-7 years ago, I had found a new hobby and passion - making games.
I&amp;rsquo;m not sure how but I found a free 3D game maker named &lt;a href="http://web.archive.org/web/20150514120532/http://www.3drad.com/">&lt;strong>3D Rad&lt;/strong>&lt;/a>.
I played around a lot with it on my ancient PC, which had a Pentium 4 and 1 Gigabyte of RAM.&lt;/p>
&lt;p>3D Rad is no longer being developed,
the latest version you can find is the same one I used at that time. Moreover, the &lt;a href="http://www.3drad.com/">website&lt;/a> only shows a
black window. It is pretty much dead now, though &lt;a href="http://3drad.org/">unofficial forums&lt;/a> exist, 3D Rad is too outdated - there are
better alternatives like Unity and Unreal engine.&lt;/p>
&lt;h2 id="the-engine">
The Engine
&lt;a class="heading-anchor" href="#the-engine">
#
&lt;/a>
&lt;/h2>
&lt;p>3D Rad had many features, especially considering that it was made by an independent developer. It had quite a few examples
included with the engine for a range of games - third person, car racing, airplane simulator, boat simulator, underwater physics
and many others.&lt;/p>
&lt;figure>&lt;img src="https://samyak.me/images/3D-Rad-UI.webp"
alt="The 3D Rad UI" width="100%">&lt;figcaption>
&lt;p>The 3D Rad UI&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>The game engine has a simple UI with two panes: objects and 3D viewer. Everything is an object in 3D Rad - rigidbodies, skins, forces,
skyboxes, sprites, scripts (!) - you get a selection of in-built objects that you can use and modify. This has a disadvantage, everything
is cluttered in the object panel. On the 3D viewer, there are helper buttons to move and rotate objects. You can make simple games
without having to write any code, though 3D Rad has scripting support for more advanced mechanisms. The documentation is quite
extensive but simple and understandable (even for a 13 year old like I was).&lt;/p>
&lt;p>The scripting engine used was &lt;a href="https://www.angelcode.com/angelscript/">AngelScript&lt;/a> which has a C-like syntax. There was a scripting
&lt;a href="http://web.archive.org/web/20150508094348/http://3drad.com/Script_reference.htm">object reference&lt;/a> which I used when writing scripts.
My programming knowledge was very limited at the time, so &lt;a href="https://github.com/shreyash14s/">my brother&lt;/a> helped me in this.&lt;/p>
&lt;p>For being a 3D game engine with so many features, it was very well optimized - it ran well enough (other than the detailed terrain
model not working) on a Pentium 4 2.0Ghz with no GPU. I played around with this a lot, started projects that were left incomplete
as soon as I had an idea for another project. There&amp;rsquo;s probably only one game that I actually completed.&lt;/p>
&lt;h2 id="demos">
Demos
&lt;a class="heading-anchor" href="#demos">
#
&lt;/a>
&lt;/h2>
&lt;p>Following are demos of some games that I made in 3D Rad, they are mostly incomplete with some debug information (a.k.a. random numbers)
right in the middle of the screen. If you&amp;rsquo;re looking for a compilation of all these demos, &lt;a href="https://youtu.be/IS7qfSnrNOI">click here&lt;/a>.&lt;/p>
&lt;h3 id="car-fight">
Car Fight
&lt;a class="heading-anchor" href="#car-fight">
#
&lt;/a>
&lt;/h3>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/MK5KUZ73Xok?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
>&lt;/iframe>
&lt;/div>
&lt;p>A car &amp;ldquo;fighting&amp;rdquo; game that has mini Suns for projectiles and a random rigidbody for powerups. In this game, you fight with an enemy
car by shooting balls at each other. The player car is Porsche 911 model that I found on the store in &lt;a href="https://www.sketchup.com/">SketchUp&lt;/a>.
The enemy car is a generic inbuilt model in 3D Rad. The blue bar represents your boost fuel which you can use to get a quick speed
boost, the fuel fills up slowly but can be filled up quickly by picking up the powerups. On the HUD, there is a speedometer, a
tachometer and a minimap. Although, by default, the camera is in a third person view, you can switch to a first person view (which
has floating hands).&lt;/p>
&lt;h3 id="slingshot">
Slingshot
&lt;a class="heading-anchor" href="#slingshot">
#
&lt;/a>
&lt;/h3>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/iueriTNdTMk?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
>&lt;/iframe>
&lt;/div>
&lt;p>A game where you slingshot a shiny ball onto a generic cuboid. That&amp;rsquo;s it, that&amp;rsquo;s the game. The game enters slow-mo as the ball nears
the target and there is sound effect when it hits. I suspect this game was inspired by some game I played at that time.
(I initially called this game &amp;ldquo;Catapult&amp;rdquo;, I have no idea why).&lt;/p>
&lt;h3 id="car-parking">
Car Parking
&lt;a class="heading-anchor" href="#car-parking">
#
&lt;/a>
&lt;/h3>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/xtm5Dy9rJYo?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
>&lt;/iframe>
&lt;/div>
&lt;p>Probably the only complete game I ever made. This game was most likely inspired from Dr. Driving. The objective is to park your &amp;ldquo;car&amp;rdquo;
in the spot shown by the floating fish. There are two camera views - top down and behind.&lt;/p>
&lt;h3 id="space-shooter">
Space Shooter
&lt;a class="heading-anchor" href="#space-shooter">
#
&lt;/a>
&lt;/h3>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/_6UCF294Hw8?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
>&lt;/iframe>
&lt;/div>
&lt;p>This game was definitely inspired from Galaxy on Fire 2, which I played a lot for many years. Here, you control a spaceship that can
shoot bullets. There are a few planets and a Sun, with distances shown on each of them and gravity simulated on them. You have two
enemy spaceships that shoot missiles at you and your objective is to shoot them down (which is probably impossible, they are too OP).
You also get a crazy boost feature, that throws your spaceship far forward.&lt;/p>
&lt;h3 id="circuit-racing">
Circuit Racing
&lt;a class="heading-anchor" href="#circuit-racing">
#
&lt;/a>
&lt;/h3>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/7IJX1IW6-kA?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
>&lt;/iframe>
&lt;/div>
&lt;p>A simple racing game with support for laps around a circuit track, which was built from the inbuilt highway pieces. Your player car
is the same as in &lt;a href="#car-fight">Car Fight&lt;/a> and with a similar HUD (except there is no background for the minimap). Your opponents are
super cars (again taken from SketchUp) and a generic SUV. The sky is made from a generic skybox but there are lightning and thunder
effects applied on it. The lighting is messed up for some reason though. Also, the game enters slow-mo when you hit another car.&lt;/p>
&lt;h3 id="infinite-plane">
Infinite Plane
&lt;a class="heading-anchor" href="#infinite-plane">
#
&lt;/a>
&lt;/h3>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/avPZZFxP2aI?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
>&lt;/iframe>
&lt;/div>
&lt;p>Not a game exactly but a fun thing to work on. The ground is an infinite plane that is procedurally generated as you move. Since
there are no obstacles, you can reach impossible speeds where the ground moves so fast you can&amp;rsquo;t look at it for long. If you try to
turn at those speeds your car will glitch out and stop.&lt;/p>
&lt;h3 id="highway-network">
Highway Network
&lt;a class="heading-anchor" href="#highway-network">
#
&lt;/a>
&lt;/h3>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8KkK1BSi9ks?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
>&lt;/iframe>
&lt;/div>
&lt;p>Another circuit racing game but this time with a much bigger map. The network of highways was made from small individual pieces of
roads. Unfortunately, this project was left incomplete as I moved on to other things. The highways had many fun types of roads and
I had even made waypoints to be used in an actual race. This could have been a real racing game&amp;hellip;&lt;/p>
&lt;hr>
&lt;p>That&amp;rsquo;s it for now. These were some of the games I made when I was a kid and I finally got the time to share it with everyone. If you
want to try some of these games for yourself, they are &lt;a href="https://drive.google.com/open?id=1zUmd5GlxMWcaWKX1ENcqh-kL69DPWBCA">here&lt;/a>.
You can find a compilation of game demos &lt;a href="https://youtu.be/IS7qfSnrNOI">here&lt;/a>.&lt;/p>
&lt;p>Thank you for reading!&lt;/p></description></item><item><title>Multiplanetary civilisation?</title><link>https://samyak.me/post/multiplanetary/</link><pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate><guid>https://samyak.me/post/multiplanetary/</guid><description>&lt;p>Elon Musk recently tweeted about the logistics requirements for a Multiplanetary civilisation.
He says that at a minimum, megatons of equipment and other resources have to be put in orbit &lt;em>every year&lt;/em>.
For reference, a &lt;a href="https://en.wikipedia.org/wiki/Saturn_V">Saturn V&lt;/a> (the launch vehicle used to send humans to the moon),
can take a payload of around 140 tons to &lt;a href="https://en.wikipedia.org/wiki/Low_Earth_orbit">Low Earth Orbit&lt;/a>.
A launch of Saturn V costs $1.23 billion (in 2019 value). To reach the goal of a megaton per year there would have to be more than
7000 launches per year, or 20 launches per day! That would cost $8.8 trillion(!).
But of course, technology has come a long way since 1969.&lt;/p>
&lt;blockquote class="twitter-tweet" data-theme='dark' data-align='center'>
&lt;p lang="en" dir="ltr">Megatons per year to orbit are needed for life to become multiplanetary&lt;/p>&amp;mdash; Elon Musk (@elonmusk) &lt;a href="https://twitter.com/elonmusk/status/1217986505513172992?ref_src=twsrc%5Etfw">January 17, 2020&lt;/a>
&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="starship">
Starship
&lt;a class="heading-anchor" href="#starship">
#
&lt;/a>
&lt;/h2>
&lt;figure>&lt;img src="https://samyak.me/images/spacex-starhopper-starship-nasa-saturn-v-apollo-mk1-height-comparison.webp"
alt="Size comparison of Starship and Saturn V. Source." width="100%">&lt;figcaption>
&lt;p>Size comparison of Starship and Saturn V. &lt;a href="https://www.businessinsider.com/elon-musk-spacex-starship-mars-rocket-spaceship-next-generation-diameter-2019-8/commerce-on-business-insider">Source.&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Elon Musk claims that SpaceX&amp;rsquo;s Starship can take upto 3 flights per day! With more than 100 tons of payload capacity (comparable to the Saturn V), a single Starship could take more than 100,000 tons per year.&lt;/p>
&lt;blockquote class="twitter-tweet" data-theme='dark' data-align='center'>
&lt;p lang="en" dir="ltr">Building 100 Starships/year gets to 1000 in 10 years or 100 megatons/year or maybe around 100k people per Earth-Mars orbital sync&lt;/p>&amp;mdash; Elon Musk (@elonmusk) &lt;a href="https://twitter.com/elonmusk/status/1217990326867988480?ref_src=twsrc%5Etfw">January 17, 2020&lt;/a>
&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>Doing the calculations, Elon says that SpaceX could take 100,000 people per decade to Earth-Mars orbit.
But wait! We are not there yet, going to Mars takes longer than that. The &lt;a href="https://en.wikipedia.org/wiki/Hohmann_transfer_orbit">Earth-Mars transfer window&lt;/a> occurs every 26 months and it takes 9 months to reach Mars after that,
which means people would have to survive for 3 years in space before reaching Mars. For reference,
the record for &lt;a href="https://en.wikipedia.org/wiki/Valeri_Polyakov">longest single stay in space&lt;/a> in human history is &lt;strong>14 months&lt;/strong>.&lt;/p>
&lt;p>Coming back to the point, 100K people per decade would mean an estimated 1 Million humans on Mars by 2050.&lt;/p>
&lt;blockquote class="twitter-tweet" data-theme='dark' data-align='center'>
&lt;p lang="und" dir="ltr">Yes&lt;/p>&amp;mdash; Elon Musk (@elonmusk) &lt;a href="https://twitter.com/elonmusk/status/1217990910052458497?ref_src=twsrc%5Etfw">January 17, 2020&lt;/a>
&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>That&amp;rsquo;s&amp;hellip; &lt;strong>0.00013%&lt;/strong> of the world population&amp;hellip; in 30 years.
&lt;figure>&lt;img src="https://samyak.me/images/uh-meme.webp" width="100%">
&lt;/figure>
&lt;/p>
&lt;p>That&amp;rsquo;s way too slow. Moreover, looking at the history of Elon (and Tesla)
with schedules, it could take much longer. Even though 1 million is a large number of people (to be on Mars), it will take centuries
before a large part of humanity is on Mars. This will further divide humanity into Earth-dwelling low lifes and fortunate
Martians, separated physically by 300 million kilometers of empty space.&lt;/p>
&lt;h2 id="life-on-mars">
Life on Mars
&lt;a class="heading-anchor" href="#life-on-mars">
#
&lt;/a>
&lt;/h2>
&lt;p>Who gets to go to Mars? &lt;a href="https://en.wikipedia.org/wiki/DearMoon_project">The rich&lt;/a>? The fortunate? The skilled (who can set up a colony on Mars)?
Elon says anyone &lt;strong>with money&lt;/strong> can go.&lt;/p>
&lt;blockquote class="twitter-tweet" data-theme='dark' data-align='center'>
&lt;p lang="en" dir="ltr">Needs to be such that anyone can go if they want, with loans available for those who don’t have money&lt;/p>&amp;mdash; Elon Musk (@elonmusk) &lt;a href="https://twitter.com/elonmusk/status/1217991853615677440?ref_src=twsrc%5Etfw">January 17, 2020&lt;/a>
&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>How do you pay for a loan on Mars? By working.&lt;/p>
&lt;blockquote class="twitter-tweet" data-theme='dark' data-align='center'>
&lt;p lang="en" dir="ltr">Yes. There will be a lot of jobs on Mars!&lt;/p>&amp;mdash; Elon Musk (@elonmusk) &lt;a href="https://twitter.com/elonmusk/status/1217992175452995584?ref_src=twsrc%5Etfw">January 17, 2020&lt;/a>
&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>So, unless you have enough money, you&amp;rsquo;ll have to work in dangerous conditions on Mars.&lt;/p>
&lt;h2 id="but-wait-spacex-isnt-the-only-space-company">
But wait, SpaceX isn&amp;rsquo;t the only space company
&lt;a class="heading-anchor" href="#but-wait-spacex-isnt-the-only-space-company">
#
&lt;/a>
&lt;/h2>
&lt;p>Of course, there&amp;rsquo;s NASA, &lt;a href="https://www.blueorigin.com/">Blue Origin&lt;/a>, &lt;a href="http://en.roscosmos.ru/">Roscosmos&lt;/a>
(A government website without HTTPS, classic.), &lt;a href="https://www.isro.gov.in/">ISRO&lt;/a> and others.&lt;/p>
&lt;p>NASA is working on a mission to send &lt;a href="https://www.nasa.gov/topics/moon-to-mars/overview">humans to Mars&lt;/a> by first going the moon and making it a checkpoint (Related: &lt;a href="https://twitter.com/realDonaldTrump/status/1137051097955102720">Moon is a part of Mars&lt;/a>).
For this mission, NASA will work with companies from the so-called &lt;a href="https://en.wikipedia.org/wiki/Billionaire_space_race">&amp;ldquo;Billionare Space Race&amp;rdquo;&lt;/a>, including SpaceX and Blue Origin.&lt;/p>
&lt;h2 id="travelling-isnt-the-only-problem">
Travelling isn&amp;rsquo;t the only problem
&lt;a class="heading-anchor" href="#travelling-isnt-the-only-problem">
#
&lt;/a>
&lt;/h2>
&lt;p>Even if SpaceX can &lt;em>send&lt;/em> humans to Mars, that will only cover one part of the problem. People have to live and survive not only on Mars
but also during the journey.
There is also the problem of communication, it could take anywhere &lt;a href="http://blogs.esa.int/mex/2012/08/05/time-delay-between-mars-and-earth/">between 4 and 24 minutes&lt;/a> for a signal to travel from Earth to Mars or vice-versa.&lt;/p>
&lt;h2 id="final-words">
Final words
&lt;a class="heading-anchor" href="#final-words">
#
&lt;/a>
&lt;/h2>
&lt;p>Though there are a lot of issues with humans having a multiplanetary civilisation, it is a very exiciting time for space travel.
Even if just a single person steps on Mars, that will be a great achievement for mankind (&amp;ldquo;one giant leap&amp;rdquo;, you could say ;-P).&lt;/p>
&lt;p>Resource-constraint private companies like SpaceX have brought efficiency to the table through their re-usable rockets.
Multiple space agencies working together towards a common goal is a great boon to space travel. It truly is an exiciting time!&lt;/p>
&lt;p>Hopefully, I&amp;rsquo;ll be reading this in my &lt;a href="https://www.cnet.com/news/nasas-mars-habitats-could-be-made-from-surprising-material-fungi/">fungi-grown home&lt;/a> on Mars sometime this century :-)&lt;/p>
&lt;p>PS: This is my first (real) blog post and there &lt;del>might be&lt;/del> will be many mistakes. Please leave a comment if you find this interesting
or if you have any opinions/facts to share. Thank you for reading!&lt;/p></description></item></channel></rss>